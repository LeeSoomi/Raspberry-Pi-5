시스템 업데이트
2-1. 터미널 열기
# 바탕화면 상단 메뉴바
# 터미널 아이콘 클릭 또는
# 메뉴 → Accessories → Terminal

2-2. 시스템 업데이트 실행
sudo apt update
# 패키지 목록 업데이트 (30초-1분)

sudo apt upgrade -y
# 시스템 업그레이드 (5-15분, 다운로드 속도에 따라)
# 중간에 질문 나오면 기본값(Enter) 선택

3단계: 한글 설치3-1. 한글 폰트 설치
sudo apt install fonts-nanum fonts-nanum-coding fonts-nanum-extra -y
설명: 나눔고딕, 나눔명조, 나눔코딩 폰트 설치 (약 1분)

3-2. 한글 입력기 설치 (ibus 방식)
bashsudo apt install ibus ibus-hangul -y
설명: ibus 입력기 프레임워크와 한글 엔진 설치 (약 1분)

3-3. ibus를 기본 입력기로 설정
bashim-config -n ibus
설명: 입력기 설정 도구 실행

창이 뜨면 "OK" 클릭
"Yes" 클릭
"ibus" 선택 → "OK"

3-4. 재부팅
sudo reboot

# 재부팅 후 터미널에서
ibus-setup설정 과정:
1. IBus Preferences 창이 열림
2. "Input Method" 탭 클릭
3. "Add" 버튼 클릭
4. 검색창에 "Korean" 입력
5. "Korean - Hangul" 선택 → "Add" 클릭
6. 창 닫기

3-6. 한영 전환 테스트
# 아무 텍스트 에디터 열기 (예: Text Editor)
# 한영 전환 키: Shift + Space
# 또는: Super(Windows키) + Space
체크포인트: 한글 입력이 되는지 확인

4단계: VS Code 설치

4-1. VS Code ARM64 다운로드
sudo apt install software-properties-common apt-transport-https wget -y
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
sudo sh -c 'echo "deb [arch=arm64] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
sudo apt update
sudo apt install code -y

4-4. VS Code 실행
# 방법 1: 터미널에서
code


4-5. VS Code 한글 설정 (선택사항)
1. VS Code 실행
2. 왼쪽 Extensions 아이콘 클릭 (네모 4개)
3. 검색: "Korean Language Pack"
4. "Korean Language Pack for Visual Studio Code" 설치


5단계: OpenCV 설치
sudo apt install -y python3-opencv libopencv-dev

설명:
python3-opencv: Python용 OpenCV
libopencv-dev: C++ 개발용 라이브러리

5-2. 추가 이미지 처리 라이브러리
sudo apt install -y python3-pil python3-numpy
설명: Pillow(이미지 처리), NumPy(수치 계산) 설치

5-3. OpenCV 설치 확인
python3 -c "import cv2; print('OpenCV version:', cv2.__version__)"예상 출력:
OpenCV version: 4.6.0
참고: Bookworm의 APT 버전은 4.6.0입니다 (충분히 안정적)

5-4. NumPy 확인
python3 -c "import numpy as np; print('NumPy version:', np.__version__)"
예상 출력:
NumPy version: 1.24.x


5-5. OpenCV 카메라 테스트 (선택사항, 카메라 연결 시)

# test_camera.py 생성
import cv2
# 카메라 열기
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("카메라를 열 수 없습니다")
    exit()

print("카메라 테스트 시작 (q를 눌러 종료)")

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    cv2.imshow('Camera Test', frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

# 실행
python3 ~/test_camera.py


5-6. OpenCV 기본 테스트
# 이미지 생성 테스트
import cv2
import numpy as np

# 빈 이미지 생성
img = np.zeros((400, 600, 3), dtype=np.uint8)

# 도형 그리기
cv2.rectangle(img, (50, 50), (550, 350), (0, 255, 0), 3)
cv2.circle(img, (300, 200), 80, (255, 0, 0), -1)
cv2.putText(img, "OpenCV Test", (180, 220), 
            cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

print("OpenCV 테스트 이미지 생성 완료")
print("창이 열립니다. 아무 키나 누르면 종료됩니다.")

cv2.imshow("OpenCV Test", img)
cv2.waitKey(0)
cv2.destroyAllWindows()

print("OpenCV 정상 작동!")



6단계: TensorFlow용 가상환경 설정
6-1. 가상환경 도구 설치
sudo apt install python3-pip python3-venv -y
설명: pip와 venv 설치 (약 30초)

6-2. Python 버전 확인
python3 --version
예상 출력: Python 3.11.x

6-3. TensorFlow 전용 가상환경 생성
cd ~
python3 -m venv env
설명: 홈 디렉토리에 env라는 가상환경 생성 (약 30초)


6-4. 가상환경 활성화
source ~/env/bin/activate
확인 방법:
bash# 프롬프트가 이렇게 변경되어야 함:
(env) pi@raspberrypi:~ $


6-5. pip 업그레이드
pip install --upgrade pip
설명: 최신 pip으로 업그레이드 (약 30초)
#프롬프트에 (env) 표시 확인

7단계: TensorFlow Lite 설치
7-1. NumPy 설치 (가상환경 내)
# 가상환경 활성화 확인 후
pip install numpy
#설명: TensorFlow 호환 NumPy 설치 (약 1분)

7-2. TensorFlow Lite 설치
pip install tflite-runtime
설명: 경량화된 TensorFlow 런타임 설치 (약 1-2분)

7-3. TensorFlow Lite 테스트
python3 << EOF
try:
    import tflite_runtime.interpreter as tflite
    print("✅ TensorFlow Lite 설치 성공!")
    print("TFLite Runtime 사용 가능")
except ImportError as e:
    print(f"❌ TFLite 설치 실패: {e}")
EOF
예상 출력:
✅ TensorFlow Lite 설치 성공!
TFLite Runtime 사용 가능


7-4. (선택) 풀 TensorFlow 설치 시도
# 경고: 실패할 수 있음, TFLite로 충분하면 건너뛰기

# 공식 pip (실패 가능성 높음)
pip install tensorflow

# 또는 커뮤니티 빌드 (더 안정적)
pip install https://github.com/PINTO0309/Tensorflow-bin/releases/download/v2.15.0.post1/tensorflow-2.15.0.post1-cp311-none-linux_aarch64.whl
⚠️ 주의: 풀 TensorFlow는 설치 실패 가능성이 있습니다.

7-5. 추가 패키지 설치 (가상환경 내)
pip install matplotlib pillow
설명:
matplotlib: 그래프 그리기
pillow: 이미지 처리

7-6. 설치된 패키지 확인
pip list
주요 패키지 확인:
numpy            1.26.x
tflite-runtime   2.x.x
matplotlib       3.x.x
pillow           10.x.x


7-7. 가상환경 비활성화
deactivate
설명: TensorFlow 작업이 끝나면 가상환경 종료
체크포인트: TFLite가 정상 import 되는지 확인

8단계: TensorFlow 테스트
8-1. TensorFlow 테스트 (가상환경)
# 가상환경 활성화
source ~/env/bin/activate

python3 << 'EOF'
print("=" * 50)
print("TensorFlow 가상환경 테스트")
print("=" * 50)

try:
    import tflite_runtime.interpreter as tflite
    print("✅ TensorFlow Lite: 설치 완료")
except ImportError:
    print("❌ TensorFlow Lite: 설치 실패")

try:
    import numpy as np
    print(f"✅ NumPy (가상환경): {np.__version__}")
except ImportError:
    print("❌ NumPy: 설치 실패")

try:
    import matplotlib
    print(f"✅ Matplotlib: {matplotlib.__version__}")
except ImportError:
    print("❌ Matplotlib: 설치 실패")

print("=" * 50)
EOF

# 가상환경 종료
deactivate


9단계: VS Code TensorFlow 실행하기

9-3. TensorFlow Lite 테스트 파일 생성
#TensorFlow_test.py

import sys
print(f"Python 경로: {sys.executable}")
print(f"Python 버전: {sys.version}")
print()

try:
    import tflite_runtime.interpreter as tflite
    print("✅ TensorFlow Lite 로드 성공!")
except ImportError as e:
    print(f"❌ TensorFlow Lite 로드 실패: {e}")
    print("\n가상환경이 활성화되었는지 확인하세요:")
    print("  source ~/cos/env/bin/activate")
    sys.exit(1)

try:
    import numpy as np
    print(f"✅ NumPy 버전: {np.__version__}")
except ImportError:
    print("❌ NumPy 로드 실패")

print("\n🎉 모든 라이브러리 정상 작동!")

실행1) VS Code에서 실행
# 1. 인터프리터 선택 (최초 1회)
#    Ctrl+Shift+P → Python: Select Interpreter
#    → /home/cos/env/bin/python

# 2. TensorFlow_test.py 파일 열기

# 3. F5 누르기 또는 ▶ 버튼 클릭

실행2)터미널에서 실행
# 가상환경 활성화
source ~/cos/env/bin/activate

# 파일 실행
cd ~/cos/code
python TensorFlow_test.py

# 종료
deactivate

